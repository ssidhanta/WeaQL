/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package weaql.common.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import javax.annotation.Generated;


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-9")
public class CRDTCompiledTransaction implements org.apache.thrift.TBase<CRDTCompiledTransaction, CRDTCompiledTransaction._Fields>, java.io.Serializable, Cloneable, Comparable<CRDTCompiledTransaction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CRDTCompiledTransaction");

  private static final org.apache.thrift.protocol.TField OPS_FIELD_DESC = new org.apache.thrift.protocol.TField("ops", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField IS_READY_FIELD_DESC = new org.apache.thrift.protocol.TField("isReady", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField REPLICATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replicatorId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TXN_CLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("txnClock", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CRDTCompiledTransactionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CRDTCompiledTransactionTupleSchemeFactory());
  }

  public List<String> ops; // required
  public boolean isReady; // required
  public int replicatorId; // required
  public String txnClock; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPS((short)1, "ops"),
    IS_READY((short)2, "isReady"),
    REPLICATOR_ID((short)3, "replicatorId"),
    TXN_CLOCK((short)4, "txnClock");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPS
          return OPS;
        case 2: // IS_READY
          return IS_READY;
        case 3: // REPLICATOR_ID
          return REPLICATOR_ID;
        case 4: // TXN_CLOCK
          return TXN_CLOCK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISREADY_ISSET_ID = 0;
  private static final int __REPLICATORID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPS, new org.apache.thrift.meta_data.FieldMetaData("ops", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IS_READY, new org.apache.thrift.meta_data.FieldMetaData("isReady", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REPLICATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("replicatorId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TXN_CLOCK, new org.apache.thrift.meta_data.FieldMetaData("txnClock", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CRDTCompiledTransaction.class, metaDataMap);
  }

  public CRDTCompiledTransaction() {
  }

  public CRDTCompiledTransaction(
    List<String> ops,
    boolean isReady,
    int replicatorId,
    String txnClock)
  {
    this();
    this.ops = ops;
    this.isReady = isReady;
    setIsReadyIsSet(true);
    this.replicatorId = replicatorId;
    setReplicatorIdIsSet(true);
    this.txnClock = txnClock;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CRDTCompiledTransaction(CRDTCompiledTransaction other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOps()) {
      List<String> __this__ops = new ArrayList<String>(other.ops);
      this.ops = __this__ops;
    }
    this.isReady = other.isReady;
    this.replicatorId = other.replicatorId;
    if (other.isSetTxnClock()) {
      this.txnClock = other.txnClock;
    }
  }

  public CRDTCompiledTransaction deepCopy() {
    return new CRDTCompiledTransaction(this);
  }

  @Override
  public void clear() {
    this.ops = null;
    setIsReadyIsSet(false);
    this.isReady = false;
    setReplicatorIdIsSet(false);
    this.replicatorId = 0;
    this.txnClock = null;
  }

  public int getOpsSize() {
    return (this.ops == null) ? 0 : this.ops.size();
  }

  public java.util.Iterator<String> getOpsIterator() {
    return (this.ops == null) ? null : this.ops.iterator();
  }

  public void addToOps(String elem) {
    if (this.ops == null) {
      this.ops = new ArrayList<String>();
    }
    this.ops.add(elem);
  }

  public List<String> getOps() {
    return this.ops;
  }

  public CRDTCompiledTransaction setOps(List<String> ops) {
    this.ops = ops;
    return this;
  }

  public void unsetOps() {
    this.ops = null;
  }

  /** Returns true if field ops is set (has been assigned a value) and false otherwise */
  public boolean isSetOps() {
    return this.ops != null;
  }

  public void setOpsIsSet(boolean value) {
    if (!value) {
      this.ops = null;
    }
  }

  public boolean isIsReady() {
    return this.isReady;
  }

  public CRDTCompiledTransaction setIsReady(boolean isReady) {
    this.isReady = isReady;
    setIsReadyIsSet(true);
    return this;
  }

  public void unsetIsReady() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREADY_ISSET_ID);
  }

  /** Returns true if field isReady is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReady() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREADY_ISSET_ID);
  }

  public void setIsReadyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREADY_ISSET_ID, value);
  }

  public int getReplicatorId() {
    return this.replicatorId;
  }

  public CRDTCompiledTransaction setReplicatorId(int replicatorId) {
    this.replicatorId = replicatorId;
    setReplicatorIdIsSet(true);
    return this;
  }

  public void unsetReplicatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICATORID_ISSET_ID);
  }

  /** Returns true if field replicatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLICATORID_ISSET_ID);
  }

  public void setReplicatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICATORID_ISSET_ID, value);
  }

  public String getTxnClock() {
    return this.txnClock;
  }

  public CRDTCompiledTransaction setTxnClock(String txnClock) {
    this.txnClock = txnClock;
    return this;
  }

  public void unsetTxnClock() {
    this.txnClock = null;
  }

  /** Returns true if field txnClock is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnClock() {
    return this.txnClock != null;
  }

  public void setTxnClockIsSet(boolean value) {
    if (!value) {
      this.txnClock = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPS:
      if (value == null) {
        unsetOps();
      } else {
        setOps((List<String>)value);
      }
      break;

    case IS_READY:
      if (value == null) {
        unsetIsReady();
      } else {
        setIsReady((Boolean)value);
      }
      break;

    case REPLICATOR_ID:
      if (value == null) {
        unsetReplicatorId();
      } else {
        setReplicatorId((Integer)value);
      }
      break;

    case TXN_CLOCK:
      if (value == null) {
        unsetTxnClock();
      } else {
        setTxnClock((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPS:
      return getOps();

    case IS_READY:
      return Boolean.valueOf(isIsReady());

    case REPLICATOR_ID:
      return Integer.valueOf(getReplicatorId());

    case TXN_CLOCK:
      return getTxnClock();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPS:
      return isSetOps();
    case IS_READY:
      return isSetIsReady();
    case REPLICATOR_ID:
      return isSetReplicatorId();
    case TXN_CLOCK:
      return isSetTxnClock();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CRDTCompiledTransaction)
      return this.equals((CRDTCompiledTransaction)that);
    return false;
  }

  public boolean equals(CRDTCompiledTransaction that) {
    if (that == null)
      return false;

    boolean this_present_ops = true && this.isSetOps();
    boolean that_present_ops = true && that.isSetOps();
    if (this_present_ops || that_present_ops) {
      if (!(this_present_ops && that_present_ops))
        return false;
      if (!this.ops.equals(that.ops))
        return false;
    }

    boolean this_present_isReady = true;
    boolean that_present_isReady = true;
    if (this_present_isReady || that_present_isReady) {
      if (!(this_present_isReady && that_present_isReady))
        return false;
      if (this.isReady != that.isReady)
        return false;
    }

    boolean this_present_replicatorId = true;
    boolean that_present_replicatorId = true;
    if (this_present_replicatorId || that_present_replicatorId) {
      if (!(this_present_replicatorId && that_present_replicatorId))
        return false;
      if (this.replicatorId != that.replicatorId)
        return false;
    }

    boolean this_present_txnClock = true && this.isSetTxnClock();
    boolean that_present_txnClock = true && that.isSetTxnClock();
    if (this_present_txnClock || that_present_txnClock) {
      if (!(this_present_txnClock && that_present_txnClock))
        return false;
      if (!this.txnClock.equals(that.txnClock))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ops = true && (isSetOps());
    list.add(present_ops);
    if (present_ops)
      list.add(ops);

    boolean present_isReady = true;
    list.add(present_isReady);
    if (present_isReady)
      list.add(isReady);

    boolean present_replicatorId = true;
    list.add(present_replicatorId);
    if (present_replicatorId)
      list.add(replicatorId);

    boolean present_txnClock = true && (isSetTxnClock());
    list.add(present_txnClock);
    if (present_txnClock)
      list.add(txnClock);

    return list.hashCode();
  }

  @Override
  public int compareTo(CRDTCompiledTransaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOps()).compareTo(other.isSetOps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ops, other.ops);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReady()).compareTo(other.isSetIsReady());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReady()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReady, other.isReady);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplicatorId()).compareTo(other.isSetReplicatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicatorId, other.replicatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxnClock()).compareTo(other.isSetTxnClock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnClock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnClock, other.txnClock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CRDTCompiledTransaction(");
    boolean first = true;

    sb.append("ops:");
    if (this.ops == null) {
      sb.append("null");
    } else {
      sb.append(this.ops);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReady:");
    sb.append(this.isReady);
    first = false;
    if (!first) sb.append(", ");
    sb.append("replicatorId:");
    sb.append(this.replicatorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("txnClock:");
    if (this.txnClock == null) {
      sb.append("null");
    } else {
      sb.append(this.txnClock);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ops == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ops' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'isReady' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'replicatorId' because it's a primitive and you chose the non-beans generator.
    if (txnClock == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'txnClock' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CRDTCompiledTransactionStandardSchemeFactory implements SchemeFactory {
    public CRDTCompiledTransactionStandardScheme getScheme() {
      return new CRDTCompiledTransactionStandardScheme();
    }
  }

  private static class CRDTCompiledTransactionStandardScheme extends StandardScheme<CRDTCompiledTransaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CRDTCompiledTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.ops = new ArrayList<String>(_list40.size);
                String _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readString();
                  struct.ops.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setOpsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_READY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isReady = iprot.readBool();
              struct.setIsReadyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLICATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replicatorId = iprot.readI32();
              struct.setReplicatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TXN_CLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.txnClock = iprot.readString();
              struct.setTxnClockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsReady()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isReady' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReplicatorId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'replicatorId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CRDTCompiledTransaction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ops != null) {
        oprot.writeFieldBegin(OPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ops.size()));
          for (String _iter43 : struct.ops)
          {
            oprot.writeString(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_READY_FIELD_DESC);
      oprot.writeBool(struct.isReady);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPLICATOR_ID_FIELD_DESC);
      oprot.writeI32(struct.replicatorId);
      oprot.writeFieldEnd();
      if (struct.txnClock != null) {
        oprot.writeFieldBegin(TXN_CLOCK_FIELD_DESC);
        oprot.writeString(struct.txnClock);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CRDTCompiledTransactionTupleSchemeFactory implements SchemeFactory {
    public CRDTCompiledTransactionTupleScheme getScheme() {
      return new CRDTCompiledTransactionTupleScheme();
    }
  }

  private static class CRDTCompiledTransactionTupleScheme extends TupleScheme<CRDTCompiledTransaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CRDTCompiledTransaction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.ops.size());
        for (String _iter44 : struct.ops)
        {
          oprot.writeString(_iter44);
        }
      }
      oprot.writeBool(struct.isReady);
      oprot.writeI32(struct.replicatorId);
      oprot.writeString(struct.txnClock);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CRDTCompiledTransaction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.ops = new ArrayList<String>(_list45.size);
        String _elem46;
        for (int _i47 = 0; _i47 < _list45.size; ++_i47)
        {
          _elem46 = iprot.readString();
          struct.ops.add(_elem46);
        }
      }
      struct.setOpsIsSet(true);
      struct.isReady = iprot.readBool();
      struct.setIsReadyIsSet(true);
      struct.replicatorId = iprot.readI32();
      struct.setReplicatorIdIsSet(true);
      struct.txnClock = iprot.readString();
      struct.setTxnClockIsSet(true);
    }
  }

}

