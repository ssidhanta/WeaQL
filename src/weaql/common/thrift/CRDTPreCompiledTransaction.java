/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package weaql.common.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-9")
public class CRDTPreCompiledTransaction implements org.apache.thrift.TBase<CRDTPreCompiledTransaction, CRDTPreCompiledTransaction._Fields>, java.io.Serializable, Cloneable, Comparable<CRDTPreCompiledTransaction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CRDTPreCompiledTransaction");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REPLICATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replicatorId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TXN_CLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("txnClock", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("opsList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SYMBOLS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("symbolsMap", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField READY_TO_COMMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("readyToCommit", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField REQUEST_TO_COORDINATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("requestToCoordinator", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CRDTPreCompiledTransactionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CRDTPreCompiledTransactionTupleSchemeFactory());
  }

  public int id; // required
  public int replicatorId; // required
  public String txnClock; // required
  public List<CRDTPreCompiledOperation> opsList; // required
  public Map<String,SymbolEntry> symbolsMap; // required
  public boolean readyToCommit; // required
  public CoordinatorRequest requestToCoordinator; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    REPLICATOR_ID((short)2, "replicatorId"),
    TXN_CLOCK((short)3, "txnClock"),
    OPS_LIST((short)4, "opsList"),
    SYMBOLS_MAP((short)5, "symbolsMap"),
    READY_TO_COMMIT((short)6, "readyToCommit"),
    REQUEST_TO_COORDINATOR((short)7, "requestToCoordinator");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // REPLICATOR_ID
          return REPLICATOR_ID;
        case 3: // TXN_CLOCK
          return TXN_CLOCK;
        case 4: // OPS_LIST
          return OPS_LIST;
        case 5: // SYMBOLS_MAP
          return SYMBOLS_MAP;
        case 6: // READY_TO_COMMIT
          return READY_TO_COMMIT;
        case 7: // REQUEST_TO_COORDINATOR
          return REQUEST_TO_COORDINATOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __REPLICATORID_ISSET_ID = 1;
  private static final int __READYTOCOMMIT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLICATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("replicatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TXN_CLOCK, new org.apache.thrift.meta_data.FieldMetaData("txnClock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPS_LIST, new org.apache.thrift.meta_data.FieldMetaData("opsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CRDTPreCompiledOperation.class))));
    tmpMap.put(_Fields.SYMBOLS_MAP, new org.apache.thrift.meta_data.FieldMetaData("symbolsMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SymbolEntry.class))));
    tmpMap.put(_Fields.READY_TO_COMMIT, new org.apache.thrift.meta_data.FieldMetaData("readyToCommit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REQUEST_TO_COORDINATOR, new org.apache.thrift.meta_data.FieldMetaData("requestToCoordinator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoordinatorRequest.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CRDTPreCompiledTransaction.class, metaDataMap);
  }

  public CRDTPreCompiledTransaction() {
  }

  public CRDTPreCompiledTransaction(
    int id,
    int replicatorId,
    String txnClock,
    List<CRDTPreCompiledOperation> opsList,
    Map<String,SymbolEntry> symbolsMap,
    boolean readyToCommit,
    CoordinatorRequest requestToCoordinator)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.replicatorId = replicatorId;
    setReplicatorIdIsSet(true);
    this.txnClock = txnClock;
    this.opsList = opsList;
    this.symbolsMap = symbolsMap;
    this.readyToCommit = readyToCommit;
    setReadyToCommitIsSet(true);
    this.requestToCoordinator = requestToCoordinator;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CRDTPreCompiledTransaction(CRDTPreCompiledTransaction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.replicatorId = other.replicatorId;
    if (other.isSetTxnClock()) {
      this.txnClock = other.txnClock;
    }
    if (other.isSetOpsList()) {
      List<CRDTPreCompiledOperation> __this__opsList = new ArrayList<CRDTPreCompiledOperation>(other.opsList.size());
      for (CRDTPreCompiledOperation other_element : other.opsList) {
        __this__opsList.add(new CRDTPreCompiledOperation(other_element));
      }
      this.opsList = __this__opsList;
    }
    if (other.isSetSymbolsMap()) {
      Map<String,SymbolEntry> __this__symbolsMap = new HashMap<String,SymbolEntry>(other.symbolsMap.size());
      for (Map.Entry<String, SymbolEntry> other_element : other.symbolsMap.entrySet()) {

        String other_element_key = other_element.getKey();
        SymbolEntry other_element_value = other_element.getValue();

        String __this__symbolsMap_copy_key = other_element_key;

        SymbolEntry __this__symbolsMap_copy_value = new SymbolEntry(other_element_value);

        __this__symbolsMap.put(__this__symbolsMap_copy_key, __this__symbolsMap_copy_value);
      }
      this.symbolsMap = __this__symbolsMap;
    }
    this.readyToCommit = other.readyToCommit;
    if (other.isSetRequestToCoordinator()) {
      this.requestToCoordinator = new CoordinatorRequest(other.requestToCoordinator);
    }
  }

  public CRDTPreCompiledTransaction deepCopy() {
    return new CRDTPreCompiledTransaction(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setReplicatorIdIsSet(false);
    this.replicatorId = 0;
    this.txnClock = null;
    this.opsList = null;
    this.symbolsMap = null;
    setReadyToCommitIsSet(false);
    this.readyToCommit = false;
    this.requestToCoordinator = null;
  }

  public int getId() {
    return this.id;
  }

  public CRDTPreCompiledTransaction setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getReplicatorId() {
    return this.replicatorId;
  }

  public CRDTPreCompiledTransaction setReplicatorId(int replicatorId) {
    this.replicatorId = replicatorId;
    setReplicatorIdIsSet(true);
    return this;
  }

  public void unsetReplicatorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICATORID_ISSET_ID);
  }

  /** Returns true if field replicatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicatorId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLICATORID_ISSET_ID);
  }

  public void setReplicatorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICATORID_ISSET_ID, value);
  }

  public String getTxnClock() {
    return this.txnClock;
  }

  public CRDTPreCompiledTransaction setTxnClock(String txnClock) {
    this.txnClock = txnClock;
    return this;
  }

  public void unsetTxnClock() {
    this.txnClock = null;
  }

  /** Returns true if field txnClock is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnClock() {
    return this.txnClock != null;
  }

  public void setTxnClockIsSet(boolean value) {
    if (!value) {
      this.txnClock = null;
    }
  }

  public int getOpsListSize() {
    return (this.opsList == null) ? 0 : this.opsList.size();
  }

  public java.util.Iterator<CRDTPreCompiledOperation> getOpsListIterator() {
    return (this.opsList == null) ? null : this.opsList.iterator();
  }

  public void addToOpsList(CRDTPreCompiledOperation elem) {
    if (this.opsList == null) {
      this.opsList = new ArrayList<CRDTPreCompiledOperation>();
    }
    this.opsList.add(elem);
  }

  public List<CRDTPreCompiledOperation> getOpsList() {
    return this.opsList;
  }

  public CRDTPreCompiledTransaction setOpsList(List<CRDTPreCompiledOperation> opsList) {
    this.opsList = opsList;
    return this;
  }

  public void unsetOpsList() {
    this.opsList = null;
  }

  /** Returns true if field opsList is set (has been assigned a value) and false otherwise */
  public boolean isSetOpsList() {
    return this.opsList != null;
  }

  public void setOpsListIsSet(boolean value) {
    if (!value) {
      this.opsList = null;
    }
  }

  public int getSymbolsMapSize() {
    return (this.symbolsMap == null) ? 0 : this.symbolsMap.size();
  }

  public void putToSymbolsMap(String key, SymbolEntry val) {
    if (this.symbolsMap == null) {
      this.symbolsMap = new HashMap<String,SymbolEntry>();
    }
    this.symbolsMap.put(key, val);
  }

  public Map<String,SymbolEntry> getSymbolsMap() {
    return this.symbolsMap;
  }

  public CRDTPreCompiledTransaction setSymbolsMap(Map<String,SymbolEntry> symbolsMap) {
    this.symbolsMap = symbolsMap;
    return this;
  }

  public void unsetSymbolsMap() {
    this.symbolsMap = null;
  }

  /** Returns true if field symbolsMap is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbolsMap() {
    return this.symbolsMap != null;
  }

  public void setSymbolsMapIsSet(boolean value) {
    if (!value) {
      this.symbolsMap = null;
    }
  }

  public boolean isReadyToCommit() {
    return this.readyToCommit;
  }

  public CRDTPreCompiledTransaction setReadyToCommit(boolean readyToCommit) {
    this.readyToCommit = readyToCommit;
    setReadyToCommitIsSet(true);
    return this;
  }

  public void unsetReadyToCommit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READYTOCOMMIT_ISSET_ID);
  }

  /** Returns true if field readyToCommit is set (has been assigned a value) and false otherwise */
  public boolean isSetReadyToCommit() {
    return EncodingUtils.testBit(__isset_bitfield, __READYTOCOMMIT_ISSET_ID);
  }

  public void setReadyToCommitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READYTOCOMMIT_ISSET_ID, value);
  }

  public CoordinatorRequest getRequestToCoordinator() {
    return this.requestToCoordinator;
  }

  public CRDTPreCompiledTransaction setRequestToCoordinator(CoordinatorRequest requestToCoordinator) {
    this.requestToCoordinator = requestToCoordinator;
    return this;
  }

  public void unsetRequestToCoordinator() {
    this.requestToCoordinator = null;
  }

  /** Returns true if field requestToCoordinator is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestToCoordinator() {
    return this.requestToCoordinator != null;
  }

  public void setRequestToCoordinatorIsSet(boolean value) {
    if (!value) {
      this.requestToCoordinator = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case REPLICATOR_ID:
      if (value == null) {
        unsetReplicatorId();
      } else {
        setReplicatorId((Integer)value);
      }
      break;

    case TXN_CLOCK:
      if (value == null) {
        unsetTxnClock();
      } else {
        setTxnClock((String)value);
      }
      break;

    case OPS_LIST:
      if (value == null) {
        unsetOpsList();
      } else {
        setOpsList((List<CRDTPreCompiledOperation>)value);
      }
      break;

    case SYMBOLS_MAP:
      if (value == null) {
        unsetSymbolsMap();
      } else {
        setSymbolsMap((Map<String,SymbolEntry>)value);
      }
      break;

    case READY_TO_COMMIT:
      if (value == null) {
        unsetReadyToCommit();
      } else {
        setReadyToCommit((Boolean)value);
      }
      break;

    case REQUEST_TO_COORDINATOR:
      if (value == null) {
        unsetRequestToCoordinator();
      } else {
        setRequestToCoordinator((CoordinatorRequest)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case REPLICATOR_ID:
      return Integer.valueOf(getReplicatorId());

    case TXN_CLOCK:
      return getTxnClock();

    case OPS_LIST:
      return getOpsList();

    case SYMBOLS_MAP:
      return getSymbolsMap();

    case READY_TO_COMMIT:
      return Boolean.valueOf(isReadyToCommit());

    case REQUEST_TO_COORDINATOR:
      return getRequestToCoordinator();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case REPLICATOR_ID:
      return isSetReplicatorId();
    case TXN_CLOCK:
      return isSetTxnClock();
    case OPS_LIST:
      return isSetOpsList();
    case SYMBOLS_MAP:
      return isSetSymbolsMap();
    case READY_TO_COMMIT:
      return isSetReadyToCommit();
    case REQUEST_TO_COORDINATOR:
      return isSetRequestToCoordinator();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CRDTPreCompiledTransaction)
      return this.equals((CRDTPreCompiledTransaction)that);
    return false;
  }

  public boolean equals(CRDTPreCompiledTransaction that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_replicatorId = true;
    boolean that_present_replicatorId = true;
    if (this_present_replicatorId || that_present_replicatorId) {
      if (!(this_present_replicatorId && that_present_replicatorId))
        return false;
      if (this.replicatorId != that.replicatorId)
        return false;
    }

    boolean this_present_txnClock = true && this.isSetTxnClock();
    boolean that_present_txnClock = true && that.isSetTxnClock();
    if (this_present_txnClock || that_present_txnClock) {
      if (!(this_present_txnClock && that_present_txnClock))
        return false;
      if (!this.txnClock.equals(that.txnClock))
        return false;
    }

    boolean this_present_opsList = true && this.isSetOpsList();
    boolean that_present_opsList = true && that.isSetOpsList();
    if (this_present_opsList || that_present_opsList) {
      if (!(this_present_opsList && that_present_opsList))
        return false;
      if (!this.opsList.equals(that.opsList))
        return false;
    }

    boolean this_present_symbolsMap = true && this.isSetSymbolsMap();
    boolean that_present_symbolsMap = true && that.isSetSymbolsMap();
    if (this_present_symbolsMap || that_present_symbolsMap) {
      if (!(this_present_symbolsMap && that_present_symbolsMap))
        return false;
      if (!this.symbolsMap.equals(that.symbolsMap))
        return false;
    }

    boolean this_present_readyToCommit = true;
    boolean that_present_readyToCommit = true;
    if (this_present_readyToCommit || that_present_readyToCommit) {
      if (!(this_present_readyToCommit && that_present_readyToCommit))
        return false;
      if (this.readyToCommit != that.readyToCommit)
        return false;
    }

    boolean this_present_requestToCoordinator = true && this.isSetRequestToCoordinator();
    boolean that_present_requestToCoordinator = true && that.isSetRequestToCoordinator();
    if (this_present_requestToCoordinator || that_present_requestToCoordinator) {
      if (!(this_present_requestToCoordinator && that_present_requestToCoordinator))
        return false;
      if (!this.requestToCoordinator.equals(that.requestToCoordinator))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_replicatorId = true;
    list.add(present_replicatorId);
    if (present_replicatorId)
      list.add(replicatorId);

    boolean present_txnClock = true && (isSetTxnClock());
    list.add(present_txnClock);
    if (present_txnClock)
      list.add(txnClock);

    boolean present_opsList = true && (isSetOpsList());
    list.add(present_opsList);
    if (present_opsList)
      list.add(opsList);

    boolean present_symbolsMap = true && (isSetSymbolsMap());
    list.add(present_symbolsMap);
    if (present_symbolsMap)
      list.add(symbolsMap);

    boolean present_readyToCommit = true;
    list.add(present_readyToCommit);
    if (present_readyToCommit)
      list.add(readyToCommit);

    boolean present_requestToCoordinator = true && (isSetRequestToCoordinator());
    list.add(present_requestToCoordinator);
    if (present_requestToCoordinator)
      list.add(requestToCoordinator);

    return list.hashCode();
  }

  @Override
  public int compareTo(CRDTPreCompiledTransaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplicatorId()).compareTo(other.isSetReplicatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicatorId, other.replicatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxnClock()).compareTo(other.isSetTxnClock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnClock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnClock, other.txnClock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpsList()).compareTo(other.isSetOpsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opsList, other.opsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSymbolsMap()).compareTo(other.isSetSymbolsMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbolsMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbolsMap, other.symbolsMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadyToCommit()).compareTo(other.isSetReadyToCommit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadyToCommit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readyToCommit, other.readyToCommit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestToCoordinator()).compareTo(other.isSetRequestToCoordinator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestToCoordinator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestToCoordinator, other.requestToCoordinator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CRDTPreCompiledTransaction(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("replicatorId:");
    sb.append(this.replicatorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("txnClock:");
    if (this.txnClock == null) {
      sb.append("null");
    } else {
      sb.append(this.txnClock);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opsList:");
    if (this.opsList == null) {
      sb.append("null");
    } else {
      sb.append(this.opsList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("symbolsMap:");
    if (this.symbolsMap == null) {
      sb.append("null");
    } else {
      sb.append(this.symbolsMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("readyToCommit:");
    sb.append(this.readyToCommit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestToCoordinator:");
    if (this.requestToCoordinator == null) {
      sb.append("null");
    } else {
      sb.append(this.requestToCoordinator);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (requestToCoordinator != null) {
      requestToCoordinator.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CRDTPreCompiledTransactionStandardSchemeFactory implements SchemeFactory {
    public CRDTPreCompiledTransactionStandardScheme getScheme() {
      return new CRDTPreCompiledTransactionStandardScheme();
    }
  }

  private static class CRDTPreCompiledTransactionStandardScheme extends StandardScheme<CRDTPreCompiledTransaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CRDTPreCompiledTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPLICATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replicatorId = iprot.readI32();
              struct.setReplicatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TXN_CLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.txnClock = iprot.readString();
              struct.setTxnClockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.opsList = new ArrayList<CRDTPreCompiledOperation>(_list48.size);
                CRDTPreCompiledOperation _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new CRDTPreCompiledOperation();
                  _elem49.read(iprot);
                  struct.opsList.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setOpsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SYMBOLS_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map51 = iprot.readMapBegin();
                struct.symbolsMap = new HashMap<String,SymbolEntry>(2*_map51.size);
                String _key52;
                SymbolEntry _val53;
                for (int _i54 = 0; _i54 < _map51.size; ++_i54)
                {
                  _key52 = iprot.readString();
                  _val53 = new SymbolEntry();
                  _val53.read(iprot);
                  struct.symbolsMap.put(_key52, _val53);
                }
                iprot.readMapEnd();
              }
              struct.setSymbolsMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // READY_TO_COMMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.readyToCommit = iprot.readBool();
              struct.setReadyToCommitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUEST_TO_COORDINATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestToCoordinator = new CoordinatorRequest();
              struct.requestToCoordinator.read(iprot);
              struct.setRequestToCoordinatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CRDTPreCompiledTransaction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPLICATOR_ID_FIELD_DESC);
      oprot.writeI32(struct.replicatorId);
      oprot.writeFieldEnd();
      if (struct.txnClock != null) {
        oprot.writeFieldBegin(TXN_CLOCK_FIELD_DESC);
        oprot.writeString(struct.txnClock);
        oprot.writeFieldEnd();
      }
      if (struct.opsList != null) {
        oprot.writeFieldBegin(OPS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.opsList.size()));
          for (CRDTPreCompiledOperation _iter55 : struct.opsList)
          {
            _iter55.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.symbolsMap != null) {
        oprot.writeFieldBegin(SYMBOLS_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.symbolsMap.size()));
          for (Map.Entry<String, SymbolEntry> _iter56 : struct.symbolsMap.entrySet())
          {
            oprot.writeString(_iter56.getKey());
            _iter56.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(READY_TO_COMMIT_FIELD_DESC);
      oprot.writeBool(struct.readyToCommit);
      oprot.writeFieldEnd();
      if (struct.requestToCoordinator != null) {
        oprot.writeFieldBegin(REQUEST_TO_COORDINATOR_FIELD_DESC);
        struct.requestToCoordinator.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CRDTPreCompiledTransactionTupleSchemeFactory implements SchemeFactory {
    public CRDTPreCompiledTransactionTupleScheme getScheme() {
      return new CRDTPreCompiledTransactionTupleScheme();
    }
  }

  private static class CRDTPreCompiledTransactionTupleScheme extends TupleScheme<CRDTPreCompiledTransaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CRDTPreCompiledTransaction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetReplicatorId()) {
        optionals.set(1);
      }
      if (struct.isSetTxnClock()) {
        optionals.set(2);
      }
      if (struct.isSetOpsList()) {
        optionals.set(3);
      }
      if (struct.isSetSymbolsMap()) {
        optionals.set(4);
      }
      if (struct.isSetReadyToCommit()) {
        optionals.set(5);
      }
      if (struct.isSetRequestToCoordinator()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetReplicatorId()) {
        oprot.writeI32(struct.replicatorId);
      }
      if (struct.isSetTxnClock()) {
        oprot.writeString(struct.txnClock);
      }
      if (struct.isSetOpsList()) {
        {
          oprot.writeI32(struct.opsList.size());
          for (CRDTPreCompiledOperation _iter57 : struct.opsList)
          {
            _iter57.write(oprot);
          }
        }
      }
      if (struct.isSetSymbolsMap()) {
        {
          oprot.writeI32(struct.symbolsMap.size());
          for (Map.Entry<String, SymbolEntry> _iter58 : struct.symbolsMap.entrySet())
          {
            oprot.writeString(_iter58.getKey());
            _iter58.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetReadyToCommit()) {
        oprot.writeBool(struct.readyToCommit);
      }
      if (struct.isSetRequestToCoordinator()) {
        struct.requestToCoordinator.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CRDTPreCompiledTransaction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.replicatorId = iprot.readI32();
        struct.setReplicatorIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.txnClock = iprot.readString();
        struct.setTxnClockIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list59 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.opsList = new ArrayList<CRDTPreCompiledOperation>(_list59.size);
          CRDTPreCompiledOperation _elem60;
          for (int _i61 = 0; _i61 < _list59.size; ++_i61)
          {
            _elem60 = new CRDTPreCompiledOperation();
            _elem60.read(iprot);
            struct.opsList.add(_elem60);
          }
        }
        struct.setOpsListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map62 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.symbolsMap = new HashMap<String,SymbolEntry>(2*_map62.size);
          String _key63;
          SymbolEntry _val64;
          for (int _i65 = 0; _i65 < _map62.size; ++_i65)
          {
            _key63 = iprot.readString();
            _val64 = new SymbolEntry();
            _val64.read(iprot);
            struct.symbolsMap.put(_key63, _val64);
          }
        }
        struct.setSymbolsMapIsSet(true);
      }
      if (incoming.get(5)) {
        struct.readyToCommit = iprot.readBool();
        struct.setReadyToCommitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.requestToCoordinator = new CoordinatorRequest();
        struct.requestToCoordinator.read(iprot);
        struct.setRequestToCoordinatorIsSet(true);
      }
    }
  }

}

