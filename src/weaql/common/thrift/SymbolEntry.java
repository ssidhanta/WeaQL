/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package weaql.common.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-9")
public class SymbolEntry implements org.apache.thrift.TBase<SymbolEntry, SymbolEntry._Fields>, java.io.Serializable, Cloneable, Comparable<SymbolEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SymbolEntry");

  private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REQUIRES_COORDINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("requiresCoordination", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField REAL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("realValue", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldName", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SymbolEntryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SymbolEntryTupleSchemeFactory());
  }

  public String symbol; // required
  public boolean requiresCoordination; // required
  public String realValue; // required
  public String tableName; // required
  public String fieldName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SYMBOL((short)1, "symbol"),
    REQUIRES_COORDINATION((short)2, "requiresCoordination"),
    REAL_VALUE((short)3, "realValue"),
    TABLE_NAME((short)4, "tableName"),
    FIELD_NAME((short)5, "fieldName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SYMBOL
          return SYMBOL;
        case 2: // REQUIRES_COORDINATION
          return REQUIRES_COORDINATION;
        case 3: // REAL_VALUE
          return REAL_VALUE;
        case 4: // TABLE_NAME
          return TABLE_NAME;
        case 5: // FIELD_NAME
          return FIELD_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUIRESCOORDINATION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUIRES_COORDINATION, new org.apache.thrift.meta_data.FieldMetaData("requiresCoordination", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REAL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("realValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("fieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SymbolEntry.class, metaDataMap);
  }

  public SymbolEntry() {
  }

  public SymbolEntry(
    String symbol,
    boolean requiresCoordination,
    String realValue,
    String tableName,
    String fieldName)
  {
    this();
    this.symbol = symbol;
    this.requiresCoordination = requiresCoordination;
    setRequiresCoordinationIsSet(true);
    this.realValue = realValue;
    this.tableName = tableName;
    this.fieldName = fieldName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SymbolEntry(SymbolEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSymbol()) {
      this.symbol = other.symbol;
    }
    this.requiresCoordination = other.requiresCoordination;
    if (other.isSetRealValue()) {
      this.realValue = other.realValue;
    }
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetFieldName()) {
      this.fieldName = other.fieldName;
    }
  }

  public SymbolEntry deepCopy() {
    return new SymbolEntry(this);
  }

  @Override
  public void clear() {
    this.symbol = null;
    setRequiresCoordinationIsSet(false);
    this.requiresCoordination = false;
    this.realValue = null;
    this.tableName = null;
    this.fieldName = null;
  }

  public String getSymbol() {
    return this.symbol;
  }

  public SymbolEntry setSymbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

  public void unsetSymbol() {
    this.symbol = null;
  }

  /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbol() {
    return this.symbol != null;
  }

  public void setSymbolIsSet(boolean value) {
    if (!value) {
      this.symbol = null;
    }
  }

  public boolean isRequiresCoordination() {
    return this.requiresCoordination;
  }

  public SymbolEntry setRequiresCoordination(boolean requiresCoordination) {
    this.requiresCoordination = requiresCoordination;
    setRequiresCoordinationIsSet(true);
    return this;
  }

  public void unsetRequiresCoordination() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUIRESCOORDINATION_ISSET_ID);
  }

  /** Returns true if field requiresCoordination is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiresCoordination() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUIRESCOORDINATION_ISSET_ID);
  }

  public void setRequiresCoordinationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUIRESCOORDINATION_ISSET_ID, value);
  }

  public String getRealValue() {
    return this.realValue;
  }

  public SymbolEntry setRealValue(String realValue) {
    this.realValue = realValue;
    return this;
  }

  public void unsetRealValue() {
    this.realValue = null;
  }

  /** Returns true if field realValue is set (has been assigned a value) and false otherwise */
  public boolean isSetRealValue() {
    return this.realValue != null;
  }

  public void setRealValueIsSet(boolean value) {
    if (!value) {
      this.realValue = null;
    }
  }

  public String getTableName() {
    return this.tableName;
  }

  public SymbolEntry setTableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public String getFieldName() {
    return this.fieldName;
  }

  public SymbolEntry setFieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  public void unsetFieldName() {
    this.fieldName = null;
  }

  /** Returns true if field fieldName is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldName() {
    return this.fieldName != null;
  }

  public void setFieldNameIsSet(boolean value) {
    if (!value) {
      this.fieldName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SYMBOL:
      if (value == null) {
        unsetSymbol();
      } else {
        setSymbol((String)value);
      }
      break;

    case REQUIRES_COORDINATION:
      if (value == null) {
        unsetRequiresCoordination();
      } else {
        setRequiresCoordination((Boolean)value);
      }
      break;

    case REAL_VALUE:
      if (value == null) {
        unsetRealValue();
      } else {
        setRealValue((String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case FIELD_NAME:
      if (value == null) {
        unsetFieldName();
      } else {
        setFieldName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SYMBOL:
      return getSymbol();

    case REQUIRES_COORDINATION:
      return Boolean.valueOf(isRequiresCoordination());

    case REAL_VALUE:
      return getRealValue();

    case TABLE_NAME:
      return getTableName();

    case FIELD_NAME:
      return getFieldName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SYMBOL:
      return isSetSymbol();
    case REQUIRES_COORDINATION:
      return isSetRequiresCoordination();
    case REAL_VALUE:
      return isSetRealValue();
    case TABLE_NAME:
      return isSetTableName();
    case FIELD_NAME:
      return isSetFieldName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SymbolEntry)
      return this.equals((SymbolEntry)that);
    return false;
  }

  public boolean equals(SymbolEntry that) {
    if (that == null)
      return false;

    boolean this_present_symbol = true && this.isSetSymbol();
    boolean that_present_symbol = true && that.isSetSymbol();
    if (this_present_symbol || that_present_symbol) {
      if (!(this_present_symbol && that_present_symbol))
        return false;
      if (!this.symbol.equals(that.symbol))
        return false;
    }

    boolean this_present_requiresCoordination = true;
    boolean that_present_requiresCoordination = true;
    if (this_present_requiresCoordination || that_present_requiresCoordination) {
      if (!(this_present_requiresCoordination && that_present_requiresCoordination))
        return false;
      if (this.requiresCoordination != that.requiresCoordination)
        return false;
    }

    boolean this_present_realValue = true && this.isSetRealValue();
    boolean that_present_realValue = true && that.isSetRealValue();
    if (this_present_realValue || that_present_realValue) {
      if (!(this_present_realValue && that_present_realValue))
        return false;
      if (!this.realValue.equals(that.realValue))
        return false;
    }

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_fieldName = true && this.isSetFieldName();
    boolean that_present_fieldName = true && that.isSetFieldName();
    if (this_present_fieldName || that_present_fieldName) {
      if (!(this_present_fieldName && that_present_fieldName))
        return false;
      if (!this.fieldName.equals(that.fieldName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_symbol = true && (isSetSymbol());
    list.add(present_symbol);
    if (present_symbol)
      list.add(symbol);

    boolean present_requiresCoordination = true;
    list.add(present_requiresCoordination);
    if (present_requiresCoordination)
      list.add(requiresCoordination);

    boolean present_realValue = true && (isSetRealValue());
    list.add(present_realValue);
    if (present_realValue)
      list.add(realValue);

    boolean present_tableName = true && (isSetTableName());
    list.add(present_tableName);
    if (present_tableName)
      list.add(tableName);

    boolean present_fieldName = true && (isSetFieldName());
    list.add(present_fieldName);
    if (present_fieldName)
      list.add(fieldName);

    return list.hashCode();
  }

  @Override
  public int compareTo(SymbolEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSymbol()).compareTo(other.isSetSymbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequiresCoordination()).compareTo(other.isSetRequiresCoordination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiresCoordination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiresCoordination, other.requiresCoordination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealValue()).compareTo(other.isSetRealValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realValue, other.realValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldName()).compareTo(other.isSetFieldName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldName, other.fieldName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SymbolEntry(");
    boolean first = true;

    sb.append("symbol:");
    if (this.symbol == null) {
      sb.append("null");
    } else {
      sb.append(this.symbol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requiresCoordination:");
    sb.append(this.requiresCoordination);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realValue:");
    if (this.realValue == null) {
      sb.append("null");
    } else {
      sb.append(this.realValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldName:");
    if (this.fieldName == null) {
      sb.append("null");
    } else {
      sb.append(this.fieldName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (symbol == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'symbol' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'requiresCoordination' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SymbolEntryStandardSchemeFactory implements SchemeFactory {
    public SymbolEntryStandardScheme getScheme() {
      return new SymbolEntryStandardScheme();
    }
  }

  private static class SymbolEntryStandardScheme extends StandardScheme<SymbolEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SymbolEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.symbol = iprot.readString();
              struct.setSymbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUIRES_COORDINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.requiresCoordination = iprot.readBool();
              struct.setRequiresCoordinationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REAL_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realValue = iprot.readString();
              struct.setRealValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIELD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fieldName = iprot.readString();
              struct.setFieldNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRequiresCoordination()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'requiresCoordination' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SymbolEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.symbol != null) {
        oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
        oprot.writeString(struct.symbol);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUIRES_COORDINATION_FIELD_DESC);
      oprot.writeBool(struct.requiresCoordination);
      oprot.writeFieldEnd();
      if (struct.realValue != null) {
        oprot.writeFieldBegin(REAL_VALUE_FIELD_DESC);
        oprot.writeString(struct.realValue);
        oprot.writeFieldEnd();
      }
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.fieldName != null) {
        oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
        oprot.writeString(struct.fieldName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SymbolEntryTupleSchemeFactory implements SchemeFactory {
    public SymbolEntryTupleScheme getScheme() {
      return new SymbolEntryTupleScheme();
    }
  }

  private static class SymbolEntryTupleScheme extends TupleScheme<SymbolEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SymbolEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.symbol);
      oprot.writeBool(struct.requiresCoordination);
      BitSet optionals = new BitSet();
      if (struct.isSetRealValue()) {
        optionals.set(0);
      }
      if (struct.isSetTableName()) {
        optionals.set(1);
      }
      if (struct.isSetFieldName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRealValue()) {
        oprot.writeString(struct.realValue);
      }
      if (struct.isSetTableName()) {
        oprot.writeString(struct.tableName);
      }
      if (struct.isSetFieldName()) {
        oprot.writeString(struct.fieldName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SymbolEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.symbol = iprot.readString();
      struct.setSymbolIsSet(true);
      struct.requiresCoordination = iprot.readBool();
      struct.setRequiresCoordinationIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.realValue = iprot.readString();
        struct.setRealValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tableName = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fieldName = iprot.readString();
        struct.setFieldNameIsSet(true);
      }
    }
  }

}

