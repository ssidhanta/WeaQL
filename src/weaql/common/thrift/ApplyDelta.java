/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package weaql.common.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import javax.annotation.Generated;


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-9")
public class ApplyDelta implements org.apache.thrift.TBase<ApplyDelta, ApplyDelta._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyDelta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyDelta");

  private static final org.apache.thrift.protocol.TField CONSTRAINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("constraintId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DELTA_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("deltaValue", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ROW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rowId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MUST_COORDINATE_FIELD_DESC = new org.apache.thrift.protocol.TField("mustCoordinate", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplyDeltaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplyDeltaTupleSchemeFactory());
  }

  public String constraintId; // required
  public String deltaValue; // required
  public String rowId; // required
  public boolean mustCoordinate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONSTRAINT_ID((short)1, "constraintId"),
    DELTA_VALUE((short)2, "deltaValue"),
    ROW_ID((short)3, "rowId"),
    MUST_COORDINATE((short)4, "mustCoordinate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONSTRAINT_ID
          return CONSTRAINT_ID;
        case 2: // DELTA_VALUE
          return DELTA_VALUE;
        case 3: // ROW_ID
          return ROW_ID;
        case 4: // MUST_COORDINATE
          return MUST_COORDINATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MUSTCOORDINATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONSTRAINT_ID, new org.apache.thrift.meta_data.FieldMetaData("constraintId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELTA_VALUE, new org.apache.thrift.meta_data.FieldMetaData("deltaValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_ID, new org.apache.thrift.meta_data.FieldMetaData("rowId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MUST_COORDINATE, new org.apache.thrift.meta_data.FieldMetaData("mustCoordinate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyDelta.class, metaDataMap);
  }

  public ApplyDelta() {
  }

  public ApplyDelta(
    String constraintId,
    String deltaValue,
    String rowId,
    boolean mustCoordinate)
  {
    this();
    this.constraintId = constraintId;
    this.deltaValue = deltaValue;
    this.rowId = rowId;
    this.mustCoordinate = mustCoordinate;
    setMustCoordinateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplyDelta(ApplyDelta other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetConstraintId()) {
      this.constraintId = other.constraintId;
    }
    if (other.isSetDeltaValue()) {
      this.deltaValue = other.deltaValue;
    }
    if (other.isSetRowId()) {
      this.rowId = other.rowId;
    }
    this.mustCoordinate = other.mustCoordinate;
  }

  public ApplyDelta deepCopy() {
    return new ApplyDelta(this);
  }

  @Override
  public void clear() {
    this.constraintId = null;
    this.deltaValue = null;
    this.rowId = null;
    setMustCoordinateIsSet(false);
    this.mustCoordinate = false;
  }

  public String getConstraintId() {
    return this.constraintId;
  }

  public ApplyDelta setConstraintId(String constraintId) {
    this.constraintId = constraintId;
    return this;
  }

  public void unsetConstraintId() {
    this.constraintId = null;
  }

  /** Returns true if field constraintId is set (has been assigned a value) and false otherwise */
  public boolean isSetConstraintId() {
    return this.constraintId != null;
  }

  public void setConstraintIdIsSet(boolean value) {
    if (!value) {
      this.constraintId = null;
    }
  }

  public String getDeltaValue() {
    return this.deltaValue;
  }

  public ApplyDelta setDeltaValue(String deltaValue) {
    this.deltaValue = deltaValue;
    return this;
  }

  public void unsetDeltaValue() {
    this.deltaValue = null;
  }

  /** Returns true if field deltaValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDeltaValue() {
    return this.deltaValue != null;
  }

  public void setDeltaValueIsSet(boolean value) {
    if (!value) {
      this.deltaValue = null;
    }
  }

  public String getRowId() {
    return this.rowId;
  }

  public ApplyDelta setRowId(String rowId) {
    this.rowId = rowId;
    return this;
  }

  public void unsetRowId() {
    this.rowId = null;
  }

  /** Returns true if field rowId is set (has been assigned a value) and false otherwise */
  public boolean isSetRowId() {
    return this.rowId != null;
  }

  public void setRowIdIsSet(boolean value) {
    if (!value) {
      this.rowId = null;
    }
  }

  public boolean isMustCoordinate() {
    return this.mustCoordinate;
  }

  public ApplyDelta setMustCoordinate(boolean mustCoordinate) {
    this.mustCoordinate = mustCoordinate;
    setMustCoordinateIsSet(true);
    return this;
  }

  public void unsetMustCoordinate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MUSTCOORDINATE_ISSET_ID);
  }

  /** Returns true if field mustCoordinate is set (has been assigned a value) and false otherwise */
  public boolean isSetMustCoordinate() {
    return EncodingUtils.testBit(__isset_bitfield, __MUSTCOORDINATE_ISSET_ID);
  }

  public void setMustCoordinateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MUSTCOORDINATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONSTRAINT_ID:
      if (value == null) {
        unsetConstraintId();
      } else {
        setConstraintId((String)value);
      }
      break;

    case DELTA_VALUE:
      if (value == null) {
        unsetDeltaValue();
      } else {
        setDeltaValue((String)value);
      }
      break;

    case ROW_ID:
      if (value == null) {
        unsetRowId();
      } else {
        setRowId((String)value);
      }
      break;

    case MUST_COORDINATE:
      if (value == null) {
        unsetMustCoordinate();
      } else {
        setMustCoordinate((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONSTRAINT_ID:
      return getConstraintId();

    case DELTA_VALUE:
      return getDeltaValue();

    case ROW_ID:
      return getRowId();

    case MUST_COORDINATE:
      return Boolean.valueOf(isMustCoordinate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONSTRAINT_ID:
      return isSetConstraintId();
    case DELTA_VALUE:
      return isSetDeltaValue();
    case ROW_ID:
      return isSetRowId();
    case MUST_COORDINATE:
      return isSetMustCoordinate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplyDelta)
      return this.equals((ApplyDelta)that);
    return false;
  }

  public boolean equals(ApplyDelta that) {
    if (that == null)
      return false;

    boolean this_present_constraintId = true && this.isSetConstraintId();
    boolean that_present_constraintId = true && that.isSetConstraintId();
    if (this_present_constraintId || that_present_constraintId) {
      if (!(this_present_constraintId && that_present_constraintId))
        return false;
      if (!this.constraintId.equals(that.constraintId))
        return false;
    }

    boolean this_present_deltaValue = true && this.isSetDeltaValue();
    boolean that_present_deltaValue = true && that.isSetDeltaValue();
    if (this_present_deltaValue || that_present_deltaValue) {
      if (!(this_present_deltaValue && that_present_deltaValue))
        return false;
      if (!this.deltaValue.equals(that.deltaValue))
        return false;
    }

    boolean this_present_rowId = true && this.isSetRowId();
    boolean that_present_rowId = true && that.isSetRowId();
    if (this_present_rowId || that_present_rowId) {
      if (!(this_present_rowId && that_present_rowId))
        return false;
      if (!this.rowId.equals(that.rowId))
        return false;
    }

    boolean this_present_mustCoordinate = true;
    boolean that_present_mustCoordinate = true;
    if (this_present_mustCoordinate || that_present_mustCoordinate) {
      if (!(this_present_mustCoordinate && that_present_mustCoordinate))
        return false;
      if (this.mustCoordinate != that.mustCoordinate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_constraintId = true && (isSetConstraintId());
    list.add(present_constraintId);
    if (present_constraintId)
      list.add(constraintId);

    boolean present_deltaValue = true && (isSetDeltaValue());
    list.add(present_deltaValue);
    if (present_deltaValue)
      list.add(deltaValue);

    boolean present_rowId = true && (isSetRowId());
    list.add(present_rowId);
    if (present_rowId)
      list.add(rowId);

    boolean present_mustCoordinate = true;
    list.add(present_mustCoordinate);
    if (present_mustCoordinate)
      list.add(mustCoordinate);

    return list.hashCode();
  }

  @Override
  public int compareTo(ApplyDelta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConstraintId()).compareTo(other.isSetConstraintId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstraintId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraintId, other.constraintId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeltaValue()).compareTo(other.isSetDeltaValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeltaValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deltaValue, other.deltaValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowId()).compareTo(other.isSetRowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowId, other.rowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMustCoordinate()).compareTo(other.isSetMustCoordinate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMustCoordinate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mustCoordinate, other.mustCoordinate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplyDelta(");
    boolean first = true;

    sb.append("constraintId:");
    if (this.constraintId == null) {
      sb.append("null");
    } else {
      sb.append(this.constraintId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deltaValue:");
    if (this.deltaValue == null) {
      sb.append("null");
    } else {
      sb.append(this.deltaValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowId:");
    if (this.rowId == null) {
      sb.append("null");
    } else {
      sb.append(this.rowId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mustCoordinate:");
    sb.append(this.mustCoordinate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (constraintId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'constraintId' was not present! Struct: " + toString());
    }
    if (deltaValue == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deltaValue' was not present! Struct: " + toString());
    }
    if (rowId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rowId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'mustCoordinate' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplyDeltaStandardSchemeFactory implements SchemeFactory {
    public ApplyDeltaStandardScheme getScheme() {
      return new ApplyDeltaStandardScheme();
    }
  }

  private static class ApplyDeltaStandardScheme extends StandardScheme<ApplyDelta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyDelta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONSTRAINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.constraintId = iprot.readString();
              struct.setConstraintIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DELTA_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deltaValue = iprot.readString();
              struct.setDeltaValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rowId = iprot.readString();
              struct.setRowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MUST_COORDINATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mustCoordinate = iprot.readBool();
              struct.setMustCoordinateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMustCoordinate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mustCoordinate' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyDelta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.constraintId != null) {
        oprot.writeFieldBegin(CONSTRAINT_ID_FIELD_DESC);
        oprot.writeString(struct.constraintId);
        oprot.writeFieldEnd();
      }
      if (struct.deltaValue != null) {
        oprot.writeFieldBegin(DELTA_VALUE_FIELD_DESC);
        oprot.writeString(struct.deltaValue);
        oprot.writeFieldEnd();
      }
      if (struct.rowId != null) {
        oprot.writeFieldBegin(ROW_ID_FIELD_DESC);
        oprot.writeString(struct.rowId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MUST_COORDINATE_FIELD_DESC);
      oprot.writeBool(struct.mustCoordinate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplyDeltaTupleSchemeFactory implements SchemeFactory {
    public ApplyDeltaTupleScheme getScheme() {
      return new ApplyDeltaTupleScheme();
    }
  }

  private static class ApplyDeltaTupleScheme extends TupleScheme<ApplyDelta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplyDelta struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.constraintId);
      oprot.writeString(struct.deltaValue);
      oprot.writeString(struct.rowId);
      oprot.writeBool(struct.mustCoordinate);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplyDelta struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.constraintId = iprot.readString();
      struct.setConstraintIdIsSet(true);
      struct.deltaValue = iprot.readString();
      struct.setDeltaValueIsSet(true);
      struct.rowId = iprot.readString();
      struct.setRowIdIsSet(true);
      struct.mustCoordinate = iprot.readBool();
      struct.setMustCoordinateIsSet(true);
    }
  }

}

